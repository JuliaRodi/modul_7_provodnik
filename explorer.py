# Модуль 7. Практика. Реализация собственного проводника. Писать будем, используя библиотеку Tkinter, которая позволяет
# нам работать с графическим интерфейсом. Давайте сделаем шаблон, то есть наше графическое окно, в котором будет текст
# и кнопка для выбора файла. Изначально создаём главное окно, оно у нас будет являться экземпляром класса Tk.
# Назовём его window и не забываем про mainloop(), то есть про постоянное обновление нашего окна. Весь код, который
# будет отвечать за расположение виджетов каких-то элементов в нашем окошке, будем писать между строчками создания и
# между циклами.
# Дальше немного его настроим, то есть изменим размер, запретим пользователю менять, то есть растягивать наше окно,
# также поменяем ему заголовок. Для изменения заголовка будем использовать title. Назовём его ‘Проводник’.
# Для изменения размера окна будем использовать geometry. Сделаем относительно небольшим ‘350 x 350’. Также запретим
# изменять размер - window.resizable(width: False, height: False). В результате запуска у нас получается окошко.
# Теперь нам необходимо добавить текст, то есть будет текстовое поле, где будет информация о том, какой файл сейчас
# открыт. Назовём это text и будем использовать виджет Lable, который будет принадлежать нашему главному окну.
# Изначально он будет иметь текст ‘Файл:’. Здесь можно добавить ширину и высоту, если в этом есть необходимость,
# сделаем 5 и 10 соответственно. Размещать элементы будем с использованием метода grid() который позволяет нам делить
# на сетку наше окно и размещать элементы по этой сетке. Соответственно, в результате у нас образуются колонны и ряды.
# В этом методе сделаем, что у нас данный элемент будет находиться в 1 колонне(column), в 1 ряду(row).
# При запуске появился файл, немного выше чем ожидали. Поэтому, чтобы видеть границы элемента, сделаем background и
# цвет silver. Свойство background отвечает за цвет заднего фона. Получается, при изменении, например, высоты, элемент
# будет становиться короче/длиннее, при изменении ширины, будет становиться шире/уже. Если не задавать ширину, а задать
# только высоту, то элемент будет подгоняться под размер надписи, которая у нас там находится. Добавим кнопку, назовём
# её button_select и обратимся к виджету Button, который точно также будет принадлежать нашему главному окошку. Сделаем
# ему ширину 5 и высоту 3. Текст у кнопки будет ‘Выбрать файл’ и разместим его в 1 колонну, но во 2 ряд. В результате
# запуска наш элемент находится прямо под файлом. Приведем код в более удобочитаемый вид. Изменим ширину текстового
# поля на 20 и также изменим ширину кнопки на 20.
# Возможно, нам понадобится 3 кнопка, но пока давайте остановимся на этих 2. Весь функционал будем добавлять в следующем
# занятии. Мы будем использовать ещё 1 возможность самого tkinter для того, чтобы вызывать диалоговые окна. Благодаря
# этому диалоговому окну, которое собираемся вызывать, мы сможем перемещаться по нашей файловой системе.
# Однако особенность библиотеки tkinter в том, что сама по себе она простая. У нас есть несколько способов компоновки
# элементов, достаточно просто создавать эти элементы на экране, и в принципе, здесь есть достаточно удобная
# кастомизация. Может в плане стиля она будет казаться немного устаревшей, но в учебных целях она отлично подходит.
# Так, например, можем взять наше окно, вызвать метод configure() и с помощью параметра bg задать задний фон black у
# нашего окна. В результате запуска фон будет черный, а текст имеет серебряный задний фон. У кнопки точно также можно
# задать background(задний фон) и foreground(передний план, например, цвет текста). Было внесено несколько изменений:
# цвет заднего фона, ширина элемента, цвет кнопки и текст самой кнопки. Далее идёт самое интересное, необходимо
# добавить функционал по работе с диалоговыми окнами. Для того чтобы работать с диалоговыми окнами, нам понадобится
# модуль filedialog из Tkinter. Этот код позволяет вызывать различные диалоговые окна, такие как всплывающие окна,
# где можно подтвердить или отменить действия, а также окна проводника для выбора файлов. Сейчас мы создадим функцию,
# которая будет отвечать за открытие таких диалоговых окон. В Tkinter логика работы такова: чтобы связать кнопку с
# определённым действием, нужно создать функцию и привязать её к кнопке через параметр command.
# Давайте создадим функцию file_select(), которая будет вызывать метод askopenfilename().
#
# В этой функции мы зададим начальную директорию initialdir (начальную директорию - термин, обозначающий указатель
# пути к одному или нескольким файлам, то есть, адрес файла), а также установим заголовок окна — «Выберите файл».
#
# Далее зададим filetypes, используя кортежи. Например, добавим ‘Текстовый файл’, ‘.txt’ и ‘Все файлы’, ‘*’.
#
# Затем вызовем эту функцию и привяжем её к кнопке. Чтобы выполнить это, добавим параметр command=file_select,
# и посмотрим, как это будет работать.
# В итоге при нажатии кнопки «Выбрать файл» откроется диалоговое окно — проводник. Начальная директория будет указана
# в initialdir, в данном случае это диск F, где расположен наш проект. Вы можете задать любой initialdir, указав путь
# в соответствии с тем, что было изучено на предыдущих занятиях. Здесь есть ‘Все файлы’ и есть ‘Текстовый файл’,
# то есть у нас есть некая выборка, позволяющая выполнить некую фильтрацию. К примеру, откроем какой-нибудь текстовый
# документ: зайдём в проекты, здесь в urbanlessons есть module_7 и текстовый файл sample2.txt. Действий никаких сейчас
# не происходит, но мы не планируем открывать это файл. Однако можем это сделать, если импортируем модуль os.
#
# Давайте это сделаем и в filename у нас будет сохраняться путь. У виджета label будем менять саму запись. Возьмём
# text, дальше нам нужно обратиться к параметру ‘text’, и к существующему, прибавим строку filename. Это можно сделать
# через configure, но здесь обратились к параметру ‘text’, и к нему будем добавлять строку, которая будет получаться в
# результате работы askopenfilename().
#
#Запускаем программу и выбираем нужный файл. Теперь перейдем в папку с нашим проектом, откроем соответствующий модуль
# и текстовый документ. В итоге отобразится запись файла и его путь.
#
# Немного изменим код и добавим пробел, чтобы освободить немного места. Плюс, нам не хватает ширины для отображения
# строки, поэтому изменим ширину виджета на 65. Проверим, чтобы он закрывал весь проводник.
#
# В переменной filename у нас хранится путь к файлу, и с помощью модуля os можем запустить этот файл. Таким образом,
# выбираем, что хотим открыть, открываем этот же текстовый документ и видим, какой файл у нас открыт и вместе с этим
# параллельно открывается этот файл.
#
# Каждый из вас может изучить библиотеку Tkinter и попробовать реализовать блокнот в качестве учебного проекта.
# Tkinter позволяет не только создавать различные интерфейсы, которые мы обсудили на занятиях, но и добавлять меню.
# Каждому пункту меню можно назначить функцию, которая будет выполнять определенные действия при нажатии. Также можно
# создавать диалоговые окна для выполнения действий, таких как открытие файлов или отображение информации. Для работы
# с такими окнами используется filedialog, который можно также интегрировать в проводник.
#
# Попробуйте добавить меню к вашему блокноту с пунктами "info" и "about". В пункте "info" должно быть написано, как
# пользоваться вашим блокнотом, а в пункте "about" — информация об авторе и версии программы. Это будет задание для
# самостоятельной проработки.
# Мы пытались объединить графический интерфейс с модулем os, хотя он использовался не так активно, так как Tkinter
# значительно упростил задачу навигации по файловой системе.

import tkinter
import os
from tkinter import filedialog


def file_select():
    filename = filedialog.askopenfilename(initialdir="/", title="Выбрать файл",
                                          filetypes=(('Текстовый файл', '.txt'),
                                                     ('Все файлы', '*')))

    text['text'] = text['text'] + '' + filename
    os.startfile(filename)

def file_info():
    info = 'info.txt'
    open('info.txt', 'r')

    text['text'] = text['text'] + '' + info
    os.startfile(info)

def file_about():
    about = 'about.txt'
    open('about.txt', 'r')

    text['text'] = text['text'] + '' + about
    os.startfile(about)


window = tkinter.Tk()
window.title('Проводник')
window.geometry('450x450')
window.configure(bg='light blue')
window.resizable(False, False)

button_info = tkinter.Button(window, width=5, height=1, text='info',
                               background='light green', foreground='blue',
                                command=file_info)

button_info.grid(column=1, row=1, pady=5)

button_about = tkinter.Button(window, width=5, height=1, text='about',
                               background='light green', foreground='blue',
                                command=file_about)

button_about.grid(column=1, row=4, pady=5)

text = tkinter.Label(window, text='Файл:', height=5, width=65, background='silver',
                             foreground='green')

text.grid(column=1, row=2)


button_select = tkinter.Button(window, width=20, height=3, text='Выбрать файл',
                               background='light green', foreground='blue',
                               command=file_select )

button_select.grid(column=1, row=3, pady=5) # pady - отступ между кнопкой и файлом

window.mainloop()
